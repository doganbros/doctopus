#########################
Manual Setup
#########################

***************************************
Requirements
***************************************

* `Node.js <https://nodejs.org/en/download/>`_ 

* `Yarn <https://yarnpkg.com/en/docs/install>`_ 

* `NestCli <https://docs.nestjs.com/cli/overview>`_ 

* `Postgres <https://www.postgresql.org/>`_ 

***************************************
Getting Started
***************************************

.. code-block:: bash

  git clone https://github.com/doganbros/octopus # Clone Repository
  cd octopus

Install dependencies with

.. code-block:: bash

  yarn install

***************************************
Create Postgres Database
***************************************

Please follow the steps below to get a development Postgres server running. The easiest way to use `docker <https://www.docker.com/>`_. If you have running Postgres database server you can skip these steps and simply create an Octopus database.

* Make sure you have docker installed on your computer. If you do not have docker already on your computer, Go to `this link <https://www.docker.com/get-started/>`_, choose your platform and click download. Follow the simple steps to get docker installed on your computer.

* Open your terminal (command prompt or preferably powershell on windows).

* Enter the command ``docker run --name octopus-dev -e POSTGRES_PASSWORD=$YOUR_POSTGRES_PASSWORD -p 5432:5432 -d postgres``. Postgres docker image will be downloaded and Postgres Docker container with the name octopus-dev will up and serve from port 5432 after this command.

* Run ``docker exec -it octopus-dev psql -U postgres`` to connect your Postgres database.

* Inside the docker container, run ``'CREATE DATABASE octopus'`` to create your Octopus database.

* Run ``\q`` to quit from Psql and Docker container.

***************************************
Setup Mattermost Server
***************************************

Please follow the steps below to get a development mattermost server running. The easiest way to use docker.

* Make sure you have docker installed on your computer. If you do not have docker already on your computer, Go to `this link <https://www.docker.com/get-started/>`_, choose your platform and click download. Follow the simple steps to get docker installed on your computer.

* Open your terminal (command prompt or preferably powershell on windows).

* Enter the command ``docker run --name mattermost-preview -d --publish 8065:8065 --add-host dockerhost:127.0.0.1 mattermost/mattermost-preview``. If you want to change the port where mattermost runs by default, replace ``<port>:8065`` by your prefered port while typing the command.

* Wait for some few minutes for the mattermost server to bootup.

* To view the logs enter the command ``docker logs mattermost-preview --follow``.

* You can run multiple instances by just changing the port of your host like above.

* Launch mattermost on your browser by visiting `http://localhost:8065 <http://localhost:8065>`_  or the port that you used above.

* Type in the system administrator's email, username and password. Note that you are supposed to use a username and email different from your account in octopus. This is because octopus will try to create an account for you when you setup everything up.

* You will be asked to create a new team. Create a new team called octopus.

* You will be signed in to the dashboard of mattermost.

* Press the 9 squares menu icon (similiar to grid view icon) on the top left corner. Then click ``System Console``.

* Search for ``Integration Management``.

* Under ``Integration Management``, scroll to the bottom and set ``Enable Personal Access Tokens`` to ``true``.

* Search for ``Bot Accounts``.

* ``Under Bot Accounts``, set ``Enable Bot Account Creation`` to ``true``.

* Now click the hamburger menu on the top left and click ``Switch to octopus``.

* Press the 9 squares menu icon on the top left corner again and then click ``Integrations``.

* Click ``Bot Accounts`` and the ``Add Bot Account`` at the top right of the screen.

* Create a bot with the username octopus-bot. Type in any display name of your choice (Optional). Type in a description (Optional) and select System Admin as the role. Then Click ``Create Bot Account``.

* You will get a setup successful prompt when everything went well. You will also be provided with a token. Please save this token at a secure place because this will be the token octopus will be using to login as the bot.

* Make sure you update all your environment variables for octopus.

* You can find examples at the .env.example file. ``REACT_APP_MM_SERVER_URL``, ``MM_SERVER_URL``, ``MM_BOT_TOKEN``. The ``MM_BOT_TOKEN`` is the token you received while creating a bot account.

* If you already had a valid session at octopus please logout and login again.

***************************************
Set Environment Variables Into .env File
***************************************

You may configyre the environment by making a copy of the boilerplate provided.

.. code-block:: bash

  cp .env.example .env # Then make changes to the boilerplate provided

***************************************
Seting Web Server and Routing
***************************************

If Octopus is installed on your local you will need to add following line to your hosts file. On Unix based systems including MacOS hosts file is ``/etc/hosts`` where as on Windows it is ``C:\windows\system32\drivers\etc\hosts``.

.. code-block:: bash

  127.0.0.1	octopus.localhost
  
***************************************
Running the Project
***************************************
 
.. code-block:: bash

  yarn server:start:dev # Runs backend side in dev mode
  yarn start:server # Runs backend in production
  yarn start:web # Runs frontend side
  

-----------------

This document focuses on style-guide.
It is a kind of coding standards applied to documentation files.
It is not about documentation content.

***************************************
Additional Scripts
***************************************

.. code-block:: bash

  # DATABASE COMMANDS
  
  # run all migrations
  yarn migration:run # Even though nestjs runs this automatically when it boots up.

  # create new migration boilerplate
  yarn migration:create
  
  # LOGS
  
  # show logs in production
  pm2 logs
  
  # TESTING
  
  # unit tests
  yarn server:test

  # e2e tests
  yarn server:test:e2e

  # test coverage
  yarn server:test:cov
  
  # Runs the app server in the development mode.
  yarn server:start:dev
  
  # Runs the app in the development mode.
  # Open http://localhost:3000 to view it in the browser.
  # You will also see any lint errors in the console.
  npm start:web
  
  # Builds the app for production to the build folder. 
  # The build is minified and the filenames include the hashes.
  yarn build
  
  # Remove the single build dependency from your project
  yarn eject
  
.. note::

  **This is a one-way operation. Once you** ``eject`` **you can't go back!**

  If you aren’t satisfied with the build tool and configuration choices, you can ``eject`` at any time. This command will remove the single build dependency from your project.

  Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your   project so you have full control over them. All of the commands except ``eject`` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

  You don’t have to ever use ``eject``. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.
