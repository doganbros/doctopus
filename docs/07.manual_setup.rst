#########################
Manual Setup
#########################

***************************************
Requirements
***************************************

* `Node.js <https://nodejs.org/en/download/>`_ 

* `Yarn <https://yarnpkg.com/en/docs/install>`_ 

* `NestCli <https://docs.nestjs.com/cli/overview>`_ 

* `Postgres <https://www.postgresql.org/>`_ 

***************************************
Getting Started
***************************************

.. code-block:: bash

  git clone https://github.com/doganbros/octopus # Clone Repository
  cd octopus

Install dependencies with

.. code-block:: bash

  yarn install

*********************
Setting up Mattermost
*********************

Please follow the steps below to get a development mattermost server running. The easiest way to use docker.

* Make sure you have docker installed on your computer. If you do not have docker already on your computer, Go to `this link <https://www.docker.com/get-started/>`_, choose your platform and click download. Follow the simple steps to get docker installed on your computer.

* Open your terminal (command prompt or preferably powershell on windows).

* Enter the command ``docker run --name mattermost-preview -d --publish 8065:8065 --add-host dockerhost:127.0.0.1 mattermost/mattermost-preview``. If you want to change the port where mattermost runs by default, replace ``<port>:8065`` by your prefered port while typing the command.

* Wait for some few minutes for the mattermost server to bootup.

* To view the logs enter the command ``docker logs mattermost-preview --follow``.

* You can run multiple instances by just changing the port of your host like above.

* Launch mattermost on your browser by visiting `http://localhost:8065 <http://localhost:8065>`_  or the port that you used above.

* Type in the system administrator's email, username and password. Note that you are supposed to use a username and email different from your account in octopus. This is because octopus will try to create an account for you when you setup everything up.

* You will be asked to create a new team. Create a new team called octopus.

* You will be signed in to the dashboard of mattermost.

* Press the 9 squares menu icon (similiar to grid view icon) on the top left corner. Then click ``System Console``.

* Search for ``Integration Management``.

* Under ``Integration Management``, scroll to the bottom and set ``Enable Personal Access Tokens`` to ``true``.

* Search for ``Bot Accounts``.

* ``Under Bot Accounts``, set ``Enable Bot Account Creation`` to ``true``.

* Now click the hamburger menu on the top left and click ``Switch to octopus``.

* Press the 9 squares menu icon on the top left corner again and then click ``Integrations``.

* Click ``Bot Accounts`` and the ``Add Bot Account`` at the top right of the screen.

* Create a bot with the username octopus-bot. Type in any display name of your choice (Optional). Type in a description (Optional) and select System Admin as the role. Then Click ``Create Bot Account``.

* You will get a setup successful prompt when everything went well. You will also be provided with a token. Please save this token at a secure place because this will be the token octopus will be using to login as the bot.

* Make sure you update all your environment variables for octopus.

* You can find examples at the .env.example file. ``REACT_APP_MM_SERVER_URL``, ``MM_SERVER_URL``, ``MM_BOT_TOKEN``. The ``MM_BOT_TOKEN`` is the token you received while creating a bot account.

* If you already had a valid session at octopus please logout and login again.

****************
Setting up Jitsi
****************

Installing Jitsi with JWT support
=================================

Octopus mmakes use of Jitsi for video streaming and live meeting purposes. It requires a Jitsi installation with JWT token support. You can refer to `this document <https://doganbros.com/index.php/jitsi/jitsi-installation-with-jwt-support-on-ubuntu-18-04-lts/>`_ by us to install Jitsi.

Installing the mod_octopus.lua Module
-------------------------------------

* Once the Jitsi is installed, enter the Jitsi machine and grab the repository below.

.. code-block:: bash

  git clone https://github.com/doganbros/placeholder-repo
  
* Copy the contents of the downloaded folder into ``/usr/share/jitsi-meet/prosody-plugins``.

Configuring Prosody
-------------------

* Edit your prosody configuration at ``/etc/prosody/conf.d/your.domain.com.cfg.lua``, and add the following lines.

.. code-block:: lua

  octopusApiKey = "yourAPIkey";
  octopusApiSecret =  "yourAPIsecret";
  octopusAPIBaseUrl = "https://your.baseAPI.url";
  
* In the same file, add octopus to the list of enabled modules of the conference component like below;

.. code-block:: lua

  Component "conference.meet.doganbros.com" "muc"
      restrict_room_creation = true
      storage = "memory"
      modules_enabled = {
          "muc_meeting_id";
          "muc_domain_mapper";
          "polls";
          "octopus";
          "token_verification";
      }
      admins = { "focus@auth.meet.doganbros.com" }
      muc_room_locking = false
      muc_room_default_public_jids = true
      
Installing Jibri
================

To install Jibri you can follow `this tutorial <https://community.jitsi.org/t/tutorial-how-to-install-the-new-jibri/88861>`_.

Customizing the Finalize Script
--------------------------------

* Find the following in your /etc/jitsi/jibri/jibri.conf file, and replace path with /srv/finalize/octopus-finalize.sh

.. code-block:: lua

  jibri {
      recording {
          finalize-script = <path>
      }
  }

* Clone the repository below, and copy the included finalize.sh file to your finalize script directory.

.. code-block:: bash

  git clone https://github.com/doganbros/placeholder-repo &&
  cd placeholder-repo &&
  cp {octopus-finalize.conf, octopus-finalize.sh} /srv/finalize

* Edit /srv/finalize/octopus-finalize.conf accordingly, and restart Jibri.

.. code-block:: bash
  systemctl restart jibri
  
***************************************
Setting up the RTMP servers
***************************************

For Octopus, you will need at least one ingress server, and as many additional egress servers as you need for ease of autoscalability. To install NGINX rtmp server, you can follow the guide in `this page <https://docs.nginx.com/nginx/admin-guide/dynamic-modules/rtmp/>`_.

Create Octopus Script
=====================

* Head into the RTMP server, and use the following to clone the required script.

.. code-block:: bash

  git clone https://github.com/doganbros/placeholder-repo &&
  cd placeholder-repo &&
  mkdir /home/octopus &&
  cp {octopus.sh, octopus-sh.conf} /home/octopus &&
  cp sample-nginx.conf /etc/nginx


* Navigate to ``/home/octopus`` and edit the contents of ``octopus-sh.conf`` accordingly. Then restart nginx.

.. code-block:: bash

  systemctl restart nginx
  
******************
Setting Up Octopus
******************

Create Postgres Database
========================

Please follow the steps below to get a development Postgres server running. The easiest way to use `docker <https://www.docker.com/>`_. If you have running Postgres database server you can skip these steps and simply create an Octopus database.

* Make sure you have docker installed on your computer. If you do not have docker already on your computer, Go to `this link <https://www.docker.com/get-started/>`_, choose your platform and click download. Follow the simple steps to get docker installed on your computer.

* Open your terminal (command prompt or preferably powershell on windows).

* Enter the command ``docker run --name octopus-dev -e POSTGRES_PASSWORD=$YOUR_POSTGRES_PASSWORD -p 5432:5432 -d postgres``. Postgres docker image will be downloaded and Postgres Docker container with the name octopus-dev will up and serve from port 5432 after this command.

* Run ``docker exec -it octopus-dev psql -U postgres`` to connect your Postgres database.

* Inside the docker container, run ``'CREATE DATABASE octopus'`` to create your Octopus database.

* Run ``\q`` to quit from Psql and Docker container.

Set Environment Variables Into .env File
=======================================

You may configure the environment by making a copy of the boilerplate provided.

.. code-block:: bash

  cp .env.example .env # Then make changes to the boilerplate provided


Seting Web Server and Routing
======================================

If Octopus is installed on your local you will need to add following line to your hosts file. On Unix based systems including MacOS hosts file is ``/etc/hosts`` where as on Windows it is ``C:\windows\system32\drivers\etc\hosts``.

.. code-block:: bash

  127.0.0.1	octopus.localhost
  
***************************************
Running Octopus
***************************************
 
.. code-block:: bash

  yarn server:start:dev # Runs backend side in dev mode
  yarn start:server # Runs backend in production
  yarn start:web # Runs frontend side
