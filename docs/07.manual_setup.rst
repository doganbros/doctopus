#########################
Manual Setup
#########################

Manual Setup installs each component individually to maximize control and configurability. All components can be installed into a single machine, provided the machine has an FQDN, and is strong enough to meet the requirements.

******************
Setting Up Octopus
******************

Requirements
============

* `Node.js <https://nodejs.org/en/download/>`_ (>= 10.13.0, except for v13) (Windows Build Tools for Windows systems)

* `Yarn <https://yarnpkg.com/en/docs/install>`_ 

* `NestCli <https://docs.nestjs.com/cli/overview>`_ 

* `Postgres <https://www.postgresql.org/>`_ 


Getting Started
===============

.. code-block:: bash

  git clone https://github.com/doganbros/octopus # Clone Repository
  cd octopus

Install dependencies with

.. code-block:: bash

  yarn install
  
Set Environment Variables Into .env File
=======================================

You may configure the environment by making a copy of the boilerplate provided.

.. code-block:: bash

  cp .env.example .env # Then make changes to the boilerplate provided
  

*********************
Setting up Mattermost
*********************

Please follow the steps below to get a development mattermost server running. The easiest way to use docker.

1. Make sure you have docker installed on your computer. If you do not
   have docker already on your computer, Go to
   https://www.docker.com/get-started, choose your platform and click
   download. Follow the simple steps to get docker installed on your
   computer.
2. Open your terminal (command prompt or preferably powershell on
   windows).
3. Enter the command
   ``docker run --name octopus-mattermost-preview -d --publish 8065:8065 --add-host dockerhost:127.0.0.1 doganbros/octopus:mattermost-preview``
4. If you want to change the port where mattermost runs by default,
   replace ``<port>:8065`` by your prefered port while typing the
   command.
5. Wait for some few minutes for the mattermost server to boot up.
6. To view the logs enter the command
   ``docker logs octopus-mattermost-preview -f``
7. Update all the environment variables used by octopus to set up
   mattermost. The variables ``REACT_APP_MM_SERVER_URL``, ``MATTERMOST_PORT`` and ``MM_SERVER_URL``
   are used to point to the mattermost server just installed. The
   variables ``MM_SYS_ADMIN_USERNAME``, ``MM_SYS_ADMIN_EMAIL``,
   ``MM_SYS_ADMIN_PASSWORD`` and ``MM_BOT_USERNAME`` are used by octopus
   to set up the system adminstrator of mattermost. The last but not
   least variable, ``REACT_APP_MM_TEAM_NAME`` sets up the team name that
   will be used by octopus in mattermost. Examples can be found in the
   ``.env.example`` file.

****************
Setting up Jitsi
****************

Installing Jitsi with JWT support
=================================

Octopus mmakes use of Jitsi for video streaming and live meeting purposes. It requires a Jitsi installation with JWT token support. You can refer to `this document <https://doganbros.com/index.php/jitsi/jitsi-installation-with-jwt-support-on-ubuntu-18-04-lts/>`_ by us to install Jitsi. Remember to update the ``.env`` variable by setting ``JWT_APP_ID``'s value to ``YOUR_APP_ID``, ``JITSI_SECRET`` to ``YOUR_SECRET`` and ``JITSI_DOMAIN`` to the domain where you set up jitsi.

Installing the mod_octopus.lua Module
-------------------------------------

* Once the Jitsi is installed, enter the Jitsi machine and grab the repository below and copy the contents of the downloaded folder into ``/usr/share/jitsi-meet/prosody-plugins``.

.. code-block:: bash

  cp ./external/prosody-modules/mod_octopus.lua /usr/share/jitsi-meet/prosody-plugins

Configuring Prosody
-------------------

* Edit your prosody configuration at ``/etc/prosody/conf.d/your.domain.com.cfg.lua``, and add the following lines.

.. code-block:: lua

  octopusApiKey = "yourAPIkey";
  octopusApiSecret =  "yourAPIsecret";
  octopusAPIBaseUrl = "https://your.baseAPI.url";
  
* In the same file, add octopus to the list of enabled modules of the conference component like below;

.. code-block:: lua

  Component "conference.meet.doganbros.com" "muc"
      restrict_room_creation = true
      storage = "memory"
      modules_enabled = {
          "muc_meeting_id";
          "muc_domain_mapper";
          "polls";
          "octopus";
          "token_verification";
      }
      admins = { "focus@auth.meet.doganbros.com" }
      muc_room_locking = false
      muc_room_default_public_jids = true
      
Installing Jibri
================

To install Jibri you can follow `this tutorial <https://community.jitsi.org/t/tutorial-how-to-install-the-new-jibri/88861>`_.

Customizing the Finalize Script
--------------------------------

* Find the following in your /etc/jitsi/jibri/jibri.conf file, and replace path with /srv/finalize/octopus-finalize.sh

.. code-block:: lua

  jibri {
      recording {
          finalize-script = <path>
      }
  }

* Copy the included finalize.sh file to your finalize script directory.

.. code-block:: bash

  cp {./external/jibri/octopus-finalize.conf, octopus-finalize.sh} /srv/finalize

* Edit /srv/finalize/octopus-finalize.conf accordingly, and restart Jibri.

.. code-block:: bash
  systemctl restart jibri
  
***************************************
Setting up the RTMP servers
***************************************

For Octopus, you will need at least one ingress server, and as many additional egress servers as you need for ease of autoscalability. To install NGINX rtmp server, you can follow the guide in `this page <https://docs.nginx.com/nginx/admin-guide/dynamic-modules/rtmp/>`_. Remember to update the ``RTMP_INGRESS_URL`` and ``RTMP_EGRESS_URL`` .env variables to your ingress and egress server url respectively.

Set Up Octopus Script For RTMP
==============================

* Head into the RTMP server, and use the following to copy the required script.

.. code-block:: bash

  mkdir /home/octopus
  cp {./external/rtmp/octopus.sh, ./external/rtmp/octopus-sh.conf} /home/octopus
  cp ./external/rtmp/sample-nginx.conf /etc/nginx


* Navigate to ``/home/octopus`` and edit the contents of ``octopus-sh.conf`` accordingly. Then restart nginx.

.. code-block:: bash

  systemctl restart nginx
  
Create Postgres Database
========================

Please follow the steps below to get a development Postgres server running. The easiest way to use `docker <https://www.docker.com/>`_. If you have running Postgres database server you can skip these steps and simply create an Octopus database.

* Make sure you have docker installed on your computer. If you do not have docker already on your computer, Go to `this link <https://www.docker.com/get-started/>`_, choose your platform and click download. Follow the simple steps to get docker installed on your computer.

* Open your terminal (command prompt or preferably powershell on windows).

* Enter the command ``docker run --name octopus-dev -e POSTGRES_PASSWORD=$YOUR_POSTGRES_PASSWORD -p 5432:5432 -d postgres``. Postgres docker image will be downloaded and Postgres Docker container with the name octopus-dev will up and serve from port 5432 after this command.

* Run ``docker exec -it octopus-dev psql -U postgres`` to connect your Postgres database.

* Inside the docker container, run ``'CREATE DATABASE octopus'`` to create your Octopus database.

* Run ``\q`` to quit from Psql and Docker container.

* Remember to update ``DB_USER``, ``DB_PASSWORD``, ``DB_DATABASE`` and ``DB_HOST`` .env variables to your database user name, database password database name, and database host respectively.


***************************************
Running Octopus
***************************************
 
.. code-block:: bash

  yarn server:start:dev # Runs backend side in dev mode
  yarn start:server # Runs backend in production
  yarn start:web # Runs frontend side
